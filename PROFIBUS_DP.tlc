%% File : PROFIBUS_DP.tlc
%% Created : Fri Jun 08 15:55:15 2018
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "PROFIBUS_DP.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  PROFIBUS_DP "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void PROFIBUS_DP_Start_wrapper(const uint8_T *Initial_DP_Address,
			const uint8_T *Number_Of_Inputs,
			const uint8_T *Number_Of_Outputs,
            const uint8_T *Number_Of_Parameters);

    extern void PROFIBUS_DP_Outputs_wrapper(const uint8_T *Ready_for_DE,
			const uint8_T *Inputs,
			uint8_T *DP_Slave_State,
			uint8_T *Outputs,
            uint8_T *Parameters,
			const uint8_T *Initial_DP_Address,
			const uint8_T *Number_Of_Inputs,
			const uint8_T *Number_Of_Outputs,
            const uint8_T *Number_Of_Parameters);

    extern void PROFIBUS_DP_Terminate_wrapper(const uint8_T *Initial_DP_Address,
			const uint8_T *Number_Of_Inputs,
			const uint8_T *Number_Of_Outputs,
            const uint8_T *Number_Of_Parameters);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  PROFIBUS_DP_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, %<py1>, %<py2>, %<pp1>, %<pp2>, %<pp3>, %<pp4>);
  %%
%endfunction



%% [EOF] PROFIBUS_DP.tlc

